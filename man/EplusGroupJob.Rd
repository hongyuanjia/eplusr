% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/group.R
\docType{class}
\name{EplusGroupJob}
\alias{EplusGroupJob}
\title{Create and Run Parametric Analysis, and Collect Results}
\description{
\code{EplusGroupJob} class is a wrapper of \code{\link[=run_multi]{run_multi()}} and provides an interface to
group multiple EnergyPlus simulations together for running and collecting
outputs.
}
\section{Usage}{
\preformatted{group <- group_job(idfs, epws)
group$run(dir = NULL, wait = TRUE, force = FALSE, echo = wait)
group$kill()
group$status()
group$output_dir(which = NULL)
group$locate_output(which = NULL, suffix = ".err", strict = TRUE)
group$errors(which = NULL, info = FALSE)
group$list_table(which = NULL)
group$read_table(which = NULL, table)
group$read_rdd(which = NULL)
group$read_mdd(which = NULL)
group$report_data_dict(which = NULL)
group$report_data(which = NULL, key_value = NULL, name = NULL, year = NULL, tz = "UTC",
                  case = "auto", all = FALSE, wide = FALSE, period = NULL, month = NULL,
                  day = NULL, hour = NULL, minute = NULL, interval = NULL,
                  simulation_days = NULL, day_type = NULL, environment_name = NULL)
group$tabular_data(which, report_name = NULL, report_for = NULL, table_name = NULL,
                   column_name = NULL, row_name = NULL)
group$print()
}
}

\section{Create}{
\preformatted{group <- group_job(idfs, epws)
}

\strong{Arguments}
\itemize{
\item \code{idfs}: Paths to EnergyPlus IDF files or a list of IDF files and \link{Idf}
objects.
\item \code{epws}: Paths to EnergyPlus EPW files or a list of EPW files and \link{Epw}
objects. Each element in the list can be \code{NULL}, which will force
design-day-only simulation. Note this needs at least one \code{Sizing:DesignDay}
object exists in that \link{Idf}. If \code{epws} is \code{NULL}, design-day-only
simulation will be conducted for all input models.
}
}

\section{Run and Collect Results}{
\preformatted{group$run(dir = NULL, wait = TRUE, force = FALSE, echo = wait)
group$kill()
group$status()
group$errors(info = FALSE)
group$output_dir(which = NULL)
group$locate_output(which = NULL, suffix = ".err", strict = TRUE)
group$list_table(which = NULL)
group$read_table(which = NULL, table)
group$read_rdd(which = NULL)
group$read_mdd(which = NULL)
group$report_data_dict(which = NULL)
group$report_data(which = NULL, key_value = NULL, name = NULL, year = NULL, tz = "UTC",
                  case = "auto", all = FALSE, wide = FALSE, period = NULL, month = NULL,
                  day = NULL, hour = NULL, minute = NULL, interval = NULL,
                  simulation_days = NULL, day_type = NULL, environment_name = NULL)
group$tabular_data(which, report_name = NULL, report_for = NULL, table_name = NULL,
                   column_name = NULL, row_name = NULL)
}

All those functions have the same meaning as in \link{EplusJob} class, except
that they only return the results of specified simulations. Most arguments
have the same meanings as in \link{EplusJob} class, except that there is an
argument \code{which} to select specific simulations.

\code{$run()} runs all parametric simulations in parallel. The number of parallel
EnergyPlus process can be controlled by \code{eplusr_option("num_parallel")}. If
\code{wait} is FALSE, then the job will be run in the background. You can get
updated job status by just printing the \code{ParametricJob} object.

\code{$kill()} kills all background EnergyPlus processes that are current running
if possible. It only works when simulations run in non-waiting mode.

\code{$status()} returns a named list of values indicates the status of the job:
\itemize{
\item \code{run_before}: \code{TRUE} if the job has been run before. \code{FALSE} otherwise.
\item \code{alive}: \code{TRUE} if the job is still running in the background. \code{FALSE}
otherwise.
\item \code{terminated}: \code{TRUE} if the job was terminated during last
simulation. \code{FALSE} otherwise. \code{NA} if the job has not been run yet.
\item \code{successful}: \code{TRUE} if all simulations ended successfully. \code{FALSE} if
there is any simulation failed. \code{NA} if the job has not been run yet.
\item \code{changed_after}: \code{TRUE} if the \emph{seed model} has been modified since last
simulation. \code{FALSE} otherwise.
\item \code{job_status}: A \link[data.table:data.table]{data.table} contains meta data
for each simulation job. For details, please see \code{\link[=run_multi]{run_multi()}}. If the
job has not been run before, a \link[data.table:data.table]{data.table}
with 4 columns is returned:
\itemize{
\item \code{index}: The index of simulation
\item \code{status}: The status of simulation. As the simulation has not been run,
\code{status} will always be "idle".
\item \code{idf}: The path of input IDF file.
\item \code{epw}: The path of input EPW file. If not provided, \code{NA} will be
assigned.
}
}

$errors() returns an \link[=read_err]{ErrFile} object which contains all contents
of the simulation error file (\code{.err}). If \code{info} is \code{FALSE}, only warnings
and errors are printed.

\code{$output_dir()} returns the output directory of specified simulations.

\code{$locate_output()} returns the path of a single output file of specified
simulations.

$errors() returns a list of \link[=read_err]{ErrFile} objects which contain all
contents of the simulation error file (\code{.err}). If \code{info} is \code{FALSE}, only
warnings and errors are printed.

\code{$list_table()} returns a list of character vectors containing all available
table and view names in the SQLite file.

\code{$read_table()} takes a valid table name of those from \code{$list_table()} and
returns that table data in a \link[data.table:data.table]{data.table} format.

\code{$read_rdd()} and \code{$read_mdd()} return the core data of Report Data
Dictionary (RDD) file and Meter Data Dictionary (MDD) file respectively. For
details, please see \code{\link[=read_rdd]{read_rdd()}}.

\code{$report_data_dict()} returns a \link[data.table:data.table]{data.table} which
contains all information about report data for specified simulations. For
details on the meaning of each columns, please see "2.20.2.1
ReportDataDictionary Table" in EnergyPlus "Output Details and Examples"
documentation.

\code{$report_data()} extracts the report data in a
\link[data.table:data.table]{data.table} using key values, variable names and
other arguments.

\code{$tabular_data()} extracts tabular data in a
\link[data.table:data.table]{data.table}.

For convenience, input character arguments matching in \code{$report_data()} and
\code{$tabular_data()} are \strong{case-insensitive}.

For \code{$read_table()}, \code{$read_rdd()}, \code{$read_mdd()}, \code{$report_data_dict()},
\code{$report_data()} and \code{$tabular_data()}, the returned data.table has a \code{case}
column in the returned \link[data.table:data.table]{data.table} that indicates
the names of models. For detailed documentation on the results of those
methods, please see \link{EplusJob}.

\strong{Arguments}
\itemize{
\item \code{which}: An integer vector of the indexes or a character vector or names of
parametric simulations. If \code{NULL}, results of all parametric simulations
are returned. Default: \code{NULL}.
\item \code{dir}: The parent output directory for specified simulations. Outputs of
each simulation are placed in a separate folder under the parent directory.
\item \code{wait}: If \code{TRUE}, R will hang on and wait all EnergyPlus simulations
finish. If \code{FALSE}, all EnergyPlus simulations are run in the background.
Default: \code{TRUE}.
\item \code{force}: Only applicable when the last simulation runs with \code{wait} equals
to \code{FALSE} and is still running. If \code{TRUE}, current running job is
forced to stop and a new one will start. Default: \code{FALSE}.
\item \code{echo}: Only applicable when \code{wait} is \code{TRUE}. Whether to simulation
status. Default: \code{TRUE}.
\item \code{suffix}: A string that indicates the file extension of simulation output.
Default: \code{".err"}.
\item \code{table}: A string specifying which table to read. Valid table names can be
obtained using \code{$list_table()}.
\item \code{strict}: If \code{TRUE}, it checks if the simulation was terminated, is
still running or the file does not exist. Default: \code{TRUE}.
\item \code{info}: If \code{FALSE},only warnings and errors are printed. Default: \code{FALSE}.
\item \code{key_value}: A character vector to identify key values of the data. If
\code{NULL}, all keys of that variable will be returned. \code{key_value} can also be
data.frame that contains \code{key_value} and \code{name} columns. In this case,
\code{name} argument in \code{$report_data()} is ignored. All available \code{key_value}
for current simulation output can be obtained using \code{$report_data_dict()}.
Default: \code{NULL}.
\item \code{name}: A character vector to identify names of the data. If
\code{NULL}, all names of that variable will be returned. If \code{key_value} is a
data.frame, \code{name} is ignored. All available \code{name} for current simulation
output can be obtained using \code{$report_data_dict()}.  Default: \code{NULL}.
\item \code{year}: Year of the date time in column \code{datetime}. If \code{NULL}, it
will calculate a year value that meets the start day of week restriction
for each environment. Default: \code{NULL}.
\item \code{tz}: Time zone of date time in column \code{datetime}. Default: \code{"UTC"}.
\item \code{case}: If not \code{NULL}, a character column will be added indicates the case
of this simulation. If \code{"auto"}, the name of the IDF file without extension
is used.
\item \code{all}: If \code{TRUE}, extra columns are also included in the returned
\link[data.table:data.table]{data.table}.
\item \code{wide}: If \code{TRUE}, the output is formated in the same way as standard
EnergyPlus csv output file.
\item \code{period}: A Date or POSIXt vector used to specify which time period to
return. The year value does not matter and only month, day, hour and
minute value will be used when subsetting. If \code{NULL}, all time period of
data is returned. Default: \code{NULL}.
\item \code{month}, \code{day}, \code{hour}, \code{minute}: Each is an integer vector for month, day,
hour, minute subsetting of \code{datetime} column when querying on the SQL
database. If \code{NULL}, no subsetting is performed on those components. All
possible \code{month}, \code{day}, \code{hour} and \code{minute} can be obtained using
\code{$read_table("Time")}.  Default: \code{NULL}.
\item \code{interval}: An integer vector used to specify which interval length of
report to extract. If \code{NULL}, all interval will be used. Default: \code{NULL}.
\item \code{simulation_days}: An integer vector to specify which simulation day data
to extract. Note that this number resets after warmup and at the beginning
of an environment period. All possible \code{simulation_days} can be obtained
using \code{$read_table("Time")}. If \code{NULL}, all simulation days will be used.
Default: \code{NULL}.
\item \code{day_type}: A character vector to specify which day type of data to
extract. All possible day types are: \code{Sunday}, \code{Monday}, \code{Tuesday},
\code{Wednesday}, \code{Thursday}, \code{Friday}, \code{Saturday}, \code{Holiday},
\code{SummerDesignDay}, \code{WinterDesignDay}, \code{CustomDay1}, and \code{CustomDay2}. All
possible values for current simulation output can be obtained using
\code{$read_table("Time")}.
\item \code{environment_name}: A character vector to specify which environment data to
extract. If \code{NULL}, all environment data are returned. Default: \code{NULL}.
All possible \code{environment_name} for current simulation output can
be obtained using\preformatted{$read_table("EnvironmentPeriods")
}
\item \code{report_name}, \code{report_for}, \code{table_name}, \code{column_name}, \code{row_name}:
Each is a character vector for subsetting when querying the SQL database.
For the meaning of each argument, please see the description above.
}
}

\section{Printing}{
\preformatted{group$print()
print(group)
}

\code{$print()} shows the core information of this \code{EplusGroupJob}, including the
path of IDFs and EPWs and also the simulation job status.

\code{$print()} is quite useful to get the simulation status, especially when
\code{wait} is \code{FALSE} in \code{$run()}. The job status will be updated and printed
whenever \code{$print()} is called.
}

\examples{
\dontrun{
if (is_avail_eplus(8.8)) {
    dir <- eplus_config(8.8)$dir
    path_idfs <- list.files(file.path(dir, "ExampleFiles"), "\\\\.idf")[1:5]
    path_epws <- list.files(file.path(dir, "WeatherData"), "\\\\.epw")[1:5]

    group <- group_job(path_idfs, path_epws)

    # get status of current job
    group$status()

    # run parametric simulations
    group$run(wait = TRUE)

    # run in background
    group$run(wait = FALSE)
    # get detailed job status by printing
    print(group)

    # status now includes a data.table with detailed information on each simulation
    group$status()

    # print simulation errors
    group$errors()

    # extract output of all simulations
    group$report_data()

    # extract only some simulations
    group$report_data(c(1, 3))
    group$tabular_data(c(1, 3))
    group$report_data(c("rotate_30", "rotate_120"))
    group$tabular_data(c("rotate_30", "rotate_120"))

    # get output directory
    group$output_dir()
    group$output_dir(c(1, 3))

    # get path of specific output file
    group$locate_output(c(1, 3), ".csv")
}
}
}
\author{
Hongyuan Jia
}
